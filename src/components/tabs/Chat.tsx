"use client"

import { useState } from "react"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Send, Bot, User, Clock } from "lucide-react"

type Message = {
  id: number
  text: string
  sender: "user" | "ai"
}

type Conversation = {
  id: number
  title: string
  lastMessage: string
  timestamp: string
}

export default function Chat() {
  const [conversations, setConversations] = useState<Conversation[]>([
    {
      id: 1,
      title: "React Hooks Discussion",
      lastMessage: "Sure, I'd be happy to help with React hooks.",
      timestamp: "2 hours ago",
    },
    {
      id: 2,
      title: "Tailwind CSS Tips",
      lastMessage: "Tailwind provides utility classes for rapid UI development.",
      timestamp: "Yesterday",
    },
    {
      id: 3,
      title: "Next.js Project Setup",
      lastMessage: "Let's start by creating a new Next.js project.",
      timestamp: "3 days ago",
    },
  ])

  const [messages, setMessages] = useState<Message[]>([
    { id: 1, text: "Hello! How can I help you today?", sender: "ai" },
    { id: 2, text: "I have a question about React hooks.", sender: "user" },
    { id: 3, text: "Sure, I'd be happy to help with React hooks. What specific question do you have?", sender: "ai" },
  ])
  const [inputMessage, setInputMessage] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  const handleSendMessage = () => {
    if (inputMessage.trim() === "") return

    const newUserMessage: Message = {
      id: messages.length + 1,
      text: inputMessage,
      sender: "user",
    }

    setMessages([...messages, newUserMessage])
    setInputMessage("")
    setIsLoading(true)

    // Simulate AI response
    setTimeout(() => {
      const newAiMessage: Message = {
        id: messages.length + 2,
        text: "This is a dummy AI response. In a real application, this would be generated by an AI model.",
        sender: "ai",
      }
      setMessages((prevMessages) => [...prevMessages, newAiMessage])
      setIsLoading(false)

      // Update the current conversation
      setConversations((prevConversations) => {
        const updatedConversations = [...prevConversations]
        updatedConversations[0] = {
          ...updatedConversations[0],
          lastMessage: newAiMessage.text,
          timestamp: "Just now",
        }
        return updatedConversations
      })
    }, 1500)
  }

  return (
    <div className="flex w-full items-center justify-center">
        <Card className="w-3/4 min-h-[60vh] mt-4 ">
        <div className="flex h-[60vh]">
            <div className="w-1/4 border-r overflow-auto">
            <h2 className="text-lg font-semibold p-4 border-b">Conversation History</h2>
            {conversations.map((conversation, index) => (
                <div
                key={conversation.id}
                className={`p-4 border-b cursor-pointer hover:bg-black  ${index === 0 ? "bg-black" : ""}`}
                >
                <h3 className="font-medium truncate">{conversation.title}</h3>
                <p className="text-sm text-gray-500 truncate">{conversation.lastMessage}</p>
                <div className="flex items-center text-xs text-gray-400 mt-1">
                    <Clock className="w-3 h-3 mr-1" />
                    {conversation.timestamp}
                </div>
                </div>
            ))}
            </div>
            <div className="w-3/4 flex flex-col">
            <div className="flex-grow overflow-auto p-4">
                <div className="space-y-4">
                {messages.map((message) => (
                    <div key={message.id} className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}>
                    <div
                        className={`max-w-[70%] p-3 rounded-lg ${
                        message.sender === "user" ? "bg-blue-500 text-white" : "bg-gray-200 text-gray-800"
                        }`}
                    >
                        <div className="flex items-center mb-1">
                        {message.sender === "user" ? <User className="w-4 h-4 mr-2" /> : <Bot className="w-4 h-4 mr-2" />}
                        <span className="font-semibold">{message.sender === "user" ? "You" : "AI"}</span>
                        </div>
                        {message.text}
                    </div>
                    </div>
                ))}
                {isLoading && (
                    <div className="flex justify-start">
                    <div className="max-w-[70%] p-3 rounded-lg bg-gray-200 text-gray-800">
                        <div className="flex items-center">
                        <Bot className="w-4 h-4 mr-2" />
                        <span className="font-semibold">AI</span>
                        </div>
                        Thinking...
                    </div>
                    </div>
                )}
                </div>
            </div>
            <div className="p-4 border-t">
                <div className="flex space-x-2">
                <Input
                    type="text"
                    placeholder="Type your message..."
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyPress={(e) => {
                    if (e.key === "Enter") {
                        handleSendMessage()
                    }
                    }}
                />
                <Button onClick={handleSendMessage} disabled={isLoading}>
                    <Send className="w-4 h-4 mr-2" />
                    Send
                </Button>
                </div>
            </div>
            </div>
        </div>
        </Card>
    </div>
  )
}

